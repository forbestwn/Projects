/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. expression.jj.jj */
/*@egen*/
options {
	/*create static method */
	STATIC = false ;
	/* the location for parser classes */
	OUTPUT_DIRECTORY = "/Users/pro/Desktop/WebToApp/CoreProject/Projects/ExpressionParser/src/com/nosliw/expression/parser";
}

PARSER_BEGIN(NosliwExpressionParser)
/* define the package name for parser classes */
package com.nosliw.expression.parser;

public class NosliwExpressionParser/*@bgen(jjtree)*/implements NosliwExpressionParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTNosliwExpressionParserState jjtree = new JJTNosliwExpressionParserState();

/*@egen*/

  public static void main(String args[]) throws ParseException, TokenMgrError {
		NosliwExpressionParser parser = new NosliwExpressionParser( System.in ) ;
		SimpleNode root = parser.Expression("");
		root.dump("");
  }  
}
PARSER_END(NosliwExpressionParser)



/*SKIP:{" " | "\t"}*/
TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < COMMAR : "," > }
TOKEN : { < CONSTANT : (["0"-"9","a"-"z","A"-"Z", "{", "}", "[", "]", "_", ":", "#", ",", " ", "\t", "\n", "\r", "'"])+ > }
/*TOKEN : { < NAME : (["0"-"9","a"-"z","A"-"Z"])+ > }*/

/*

*/
Token Name():
{/*@bgen(jjtree) Name */
        SimpleNode jjtn000 = new SimpleNode(JJTNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
}
{/*@bgen(jjtree) Name */
        try {
/*@egen*/
	t = <CONSTANT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image; return t;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
constant data, any format allowed, json, string literal, ...
*/
void Constant()          :
{/*@bgen(jjtree) CONSTANT */
        SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
}
{/*@bgen(jjtree) CONSTANT */
        try {
/*@egen*/
	":("  t=<CONSTANT>  "):"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
data type, it is appeared when do data type function call
*/
void DataType()          :
{/*@bgen(jjtree) DATATYPE */
        SimpleNode jjtn000 = new SimpleNode(JJTDATATYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
}
{/*@bgen(jjtree) DATATYPE */
        try {
/*@egen*/
	"!("  t=Name()  ")!"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
variable in expression. 
*/
void Variable()          :
{/*@bgen(jjtree) VARIABLE */
        SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
}
{/*@bgen(jjtree) VARIABLE */
        try {
/*@egen*/
	"?("	t=Name()  ")?"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
represent any expression
*/
SimpleNode Expression(String index)            :
{/*@bgen(jjtree) EXPRESSION */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	int i = 0;
}
{/*@bgen(jjtree) EXPRESSION */
        try {
/*@egen*/
	(
		Variable() Expression1()
		|
		Constant () Expression1()
		|
		DataType() "." Name() 
		<OPEN_PAR> [(Expression(String.valueOf(i)) {i++;})
		(<COMMAR> Expression(String.valueOf(i))  {i++;})*]	
		<CLOSE_PAR> Expression1()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value=index;   return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
it is create to avoid left recursion.
*/
SimpleNode Expression1()             :
{/*@bgen(jjtree) EXPRESSION1 */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION1);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	int i = 0;
}
{/*@bgen(jjtree) EXPRESSION1 */
        try {
/*@egen*/
	(
		"." Name() 
		(
			[<OPEN_PAR> [(Expression(String.valueOf(i)) {i++;}) (<COMMAR> Expression(String.valueOf(i)) {i++;})*]<CLOSE_PAR> {jjtn000.value="function";}] Expression1()
		)
		|
		{}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}