/**
 * 
 */
var nosliwExpressionManager = function(){

	/*
	 * execute operand
	 * 		variables : name --- data/wraper 
	 * return : wraper
	 */
	var loc_executeOperand = function(operand, variables){
		var out = undefined;
		var operandType = operand[NOSLIWATCOMMONTRIBUTECONSTANT.ATTR_OPERAND_TYPE];
		if(operandType==NOSLIWCOMMONCONSTANT.CONS_EXPRESSION_OPERAND_CONSTANT){
			out = operand[NOSLIWATCOMMONTRIBUTECONSTANT.ATTR_OPERAND_CONSTANT_DATA];
		}
		else if(operandType==NOSLIWCOMMONCONSTANT.CONS_EXPRESSION_OPERAND_VARIABLE){
			var varName = operand[NOSLIWATCOMMONTRIBUTECONSTANT.ATTR_OPERAND_VARIABLE_VARNAME];
			out = variables[varName];
		}
		elseif(operandType==NOSLIWCOMMONCONSTANT.CONS_EXPRESSION_OPERAND_DATAOPERATION ||
				operandType==NOSLIWCOMMONCONSTANT.CONS_EXPRESSION_OPERAND_DATATYPEOPERATION){
			var operation = operand[NOSLIWATCOMMONTRIBUTECONSTANT.ATTR_OPERAND_OPERATION_OPERATION];
			var baseOperand = operand[NOSLIWATCOMMONTRIBUTECONSTANT.ATTR_OPERAND_DATAOPERATION_BASEDATA];
			var baseDataTypeInfo = operand[NOSLIWATCOMMONTRIBUTECONSTANT.ATTR_OPERAND_OPERATION_BASEDATATYPEINFO];

			var parms = [];
			if(baseOperand!=undefined){
				var baseObj = loc_executeOperand(baseOperand, variables);
				parms.push(baseObj);
				baseDataTypeInfo = baseObj;
			}
			
			var parmsOperand = operand[NOSLIWATCOMMONTRIBUTECONSTANT.ATTR_OPERAND_OPERATION_PARAMETERS];
			for(var i=0; i<parmsOperand.length; i++){
				parms.push(loc_executeOperand(parmsOperand[i], variables));
			}
			out nowliw.getDataTypeManager.executeDataOperation(baseDataTypeInfo, operation, parms);
		}
		elseif(operandType==NOSLIWCOMMONCONSTANT.CONS_EXPRESSION_OPERAND_PATHOPERATION){
			
		}
		return out;
	};
	
	var loc_operateData = function(operation, parmWrapers){
		var parms = [];
		var categary = undefined;
		var type = undefined;
		for(var i=1; i<arguments.length; i++){
			if(categary==undefined){
				categary = getWraperDataCategary(arguments[i]);
				type = getWraperDataType(arguments[i]);
			}
			parms.push(arguments[i].data);
		}
		var outDataWraper = NosliwDataTypeManager.dataTypeOperationWraper(categary, type, operation, parms);
		return outDataWraper;
	};
	
	return {
		
	};
}();


var EXPRESSION_TYPE_CONSTANT = "1";
var EXPRESSION_TYPE_VARIABLE = "2";
var EXPRESSION_TYPE_EXPRESSION = "3";

var operateData = function(operation, parmWrapers){
	var parms = [];
	var categary = undefined;
	var type = undefined;
	for(var i=1; i<arguments.length; i++){
		if(categary==undefined){
			categary = getWraperDataCategary(arguments[i]);
			type = getWraperDataType(arguments[i]);
		}
		parms.push(arguments[i].data);
	}
	var outDataWraper = NosliwDataTypeManager.dataTypeOperationWraper(categary, type, operation, parms);
	return outDataWraper;
};

var processExpression = function(expression, variables){
	var datas = expression.operationData;
	var categary = expression.baseType.categary;
	var type = expression.baseType.type;
	var operation = expression.operation;
	var parms = [];
	for (var i in datas) {
		var opData = datas[i];
		var opDataType = opData.type;
		if(opDataType==EXPRESSION_TYPE_CONSTANT){
			parms.push(opData.data.data);
		}
		else if(opDataType==EXPRESSION_TYPE_VARIABLE){
			parms.push(variables[opData.variable]);
		}
		else if(opDataType==EXPRESSION_TYPE_EXPRESSION){
			var subResult = processExpression(opData, variables);
			parms.push(subResult);
		}
	}
	
	var outData = NosliwDataTypeManager.dataTypeOperationData(categary, type, operation, parms);
	return outData;
};

