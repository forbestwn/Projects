package com.nosliw.entity.data;

import java.util.LinkedHashMap;
import java.util.Map;

import org.json.JSONObject;

import com.nosliw.common.serialization.HAPStringable;
import com.nosliw.common.utils.HAPBasicUtility;
import com.nosliw.common.utils.HAPConstant;
import com.nosliw.utils.HAPEntityUtility;
import com.nosliw.utils.HAPPathParser;

public class HAPEntityID implements HAPStringable{
	private String m_userContext;
	private String m_type;
	private String m_id;
	private String m_attrPath;

	public HAPEntityID(String userContext, String type, String id, String attrPath){
		this.m_userContext = userContext;
		this.m_type = type;
		this.m_id = id;
		this.m_attrPath = attrPath;
	}
	
	public HAPEntityID(String userContext, String type, String id){
		this.m_userContext = userContext;
		this.m_type = type;
		this.m_id = id;
	}

	public HAPEntityID(HAPEntityID parentID, String attrPath){
		this.m_userContext = parentID.getUserContext();
		this.m_type = parentID.getType();
		this.m_id = parentID.getId();
		if(HAPBasicUtility.isStringEmpty(parentID.getAttributePath()))  this.m_attrPath = attrPath;
		else if(HAPBasicUtility.isStringEmpty(attrPath))  this.m_attrPath = parentID.getAttributePath();
		else	this.m_attrPath = parentID.getAttributePath() + HAPConstant.SEPERATOR_ATTRPATH + attrPath; 
		
		uniformalize();
	}
	
	public HAPEntityID(String userContext, String ID){
		int i1 = ID.indexOf(HAPConstant.SEPERATOR_USERCONTEXT);
		String id1 = ID;
		if(i1!=-1){
			m_userContext = ID.substring(0, i1);
			id1 = ID.substring(i1+1);
		}
		else{
			m_userContext = userContext;
		}
		
		int i2 = id1.indexOf(HAPConstant.SEPERATOR_ID);
		String id2 = id1; 
		if(i2!=-1){
			m_type = id1.substring(0, i2);
			id2 = id1.substring(i2+1);
		}
		
		int i3 = id2.indexOf(HAPConstant.SEPERATOR_ID);
		String id3 = id2;
		if(i3!=-1){
			id3 = id2.substring(0, i3);
			m_attrPath = id2.substring(i3+1);
		}
		m_id = id3;
	}
	
	public HAPEntityID(String ID){
		this("", ID);
	}
	
	public HAPEntityID getRootEntityID(){
		return new HAPEntityID(this.getUserContext(), this.getType(), this.getId(), null);
	}
	
	public HAPEntityID getUniformEntityID(){
		String path = this.getAttributePath();
		String id = this.getId();
		int index = id.indexOf(HAPConstant.SEPERATOR_ID);
		if(index!=-1){
			path = id.substring(index+1) + HAPConstant.SEPERATOR_ATTRPATH + path;
			id = id.substring(0, index);
		}
		HAPEntityID ID = new HAPEntityID(this.getUserContext(), this.getType(), id, path);
		return ID;
	}
	
	private void uniformalize(){
		int index = this.m_id.indexOf(HAPConstant.SEPERATOR_ID);
		if(index!=-1){
			this.m_attrPath = this.m_id.substring(index+1) + HAPConstant.SEPERATOR_ATTRPATH + this.m_attrPath;
			this.m_id = this.m_id.substring(0, index);
		}
	}
	
	public String getUserContext(){return this.m_userContext;}
	public void setUserContext(String userContext){this.m_userContext=userContext;}
	public String getType(){return this.m_type;}
	public String getId(){return this.m_id;}
	public String getAttributePath(){return this.m_attrPath;}
	
	@Override
	public String toStringValue(String format){
		return this.toString();
		
//		Map<String, String> jsonMap = new LinkedHashMap<String, String>();
//		jsonMap.put(HAPConstant.ENTITYID_ATTRIBUTE_FULLNAME, this.toString());
//
//		Map<String, String> jsonDataMap = new LinkedHashMap<String, String>();
//		jsonDataMap.put(HAPConstant.ENTITYID_ATTRIBUTE_USERCONTEXT, this.m_userContext);
//		jsonDataMap.put(HAPConstant.ENTITYID_ATTRIBUTE_ID, this.m_id);
//		jsonDataMap.put(HAPConstant.ENTITYID_ATTRIBUTE_TYPE, this.m_type);
//		jsonDataMap.put(HAPConstant.ENTITYID_ATTRIBUTE_ATTRPATH, this.m_attrPath);
//		jsonMap.put(HAPConstant.ENTITYID_ATTRIBUTE_DATA, HAPJsonUtility.getMapJson(jsonDataMap));
//
//		return HAPJsonUtility.getMapJson(jsonMap);
	}
	
	public static HAPEntityID parseJson(JSONObject jsonEntityID){
		String userContext = jsonEntityID.optString(HAPConstant.ENTITYID_ATTRIBUTE_USERCONTEXT);
		String type = jsonEntityID.optString(HAPConstant.ENTITYID_ATTRIBUTE_TYPE);
		String id = jsonEntityID.optString(HAPConstant.ENTITYID_ATTRIBUTE_ID);
		String attrPath = jsonEntityID.optString(HAPConstant.ENTITYID_ATTRIBUTE_ATTRPATH);
		return new HAPEntityID(userContext, type, id, attrPath);
	}
	
	@Override
	public HAPEntityID clone(){
		return new HAPEntityID(this.m_userContext, this.m_type, this.m_id, this.m_attrPath);
	}
	
	@Override
	public boolean equals(Object o){
		if(o instanceof HAPEntityID){
			HAPEntityID ID = (HAPEntityID)o;
			if(HAPEntityUtility.isEquals(ID.getUserContext(), this.getUserContext()) && 
				HAPEntityUtility.isEquals(ID.getType(), this.getType()) &&
				HAPEntityUtility.isEquals(ID.getId(), this.getId()) &&
				HAPEntityUtility.isEquals(ID.getAttributePath(), this.getAttributePath())){
				return true;
			}
			else  return false;
		}
		else  return false;
	}

	@Override
	public String toString(){
		if(HAPBasicUtility.isStringEmpty(this.getType()))  return null;
		if(HAPBasicUtility.isStringEmpty(this.getId()))  return null;
		
		StringBuffer out = new StringBuffer();
		out.append(this.getUserContext());
		out.append(HAPConstant.SEPERATOR_USERCONTEXT);
		out.append(this.getType());
		out.append(HAPConstant.SEPERATOR_ID);
		out.append(this.getId());
		if(HAPEntityUtility.isStringNotEmpty(this.getAttributePath())){
			out.append(HAPConstant.SEPERATOR_ID);
			out.append(this.getAttributePath());
		}
		return out.toString();
	}
}

