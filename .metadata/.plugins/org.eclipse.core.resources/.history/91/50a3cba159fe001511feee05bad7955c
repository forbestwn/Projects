package com.nosliw.expression;

import java.util.Map;

import com.nosliw.common.exception.HAPServiceData;
import com.nosliw.common.utils.HAPConstant;
import com.nosliw.data.HAPData;
import com.nosliw.data.HAPDataTypeManager;
import com.nosliw.data.HAPOperand;
import com.nosliw.data.HAPWraper;
import com.nosliw.data.info.HAPDataOperationInfo;
import com.nosliw.data.info.HAPDataTypeInfo;

public class HAPOperandNewOperation extends HAPOperandOperation{
	
	private HAPDataOperationInfo m_newOperationInfo;
	
	public HAPOperandNewOperation(HAPDataTypeInfo dataTypeInfo, HAPOperand[] parms, HAPDataTypeManager dataTypeMan){
		super(null, parms, dataTypeMan);
		this.m_baseDataTypeInfo = dataTypeInfo;
		this.m_baseDataType = this.getDataTypeManager().getDataType(m_baseDataTypeInfo);
	}

	@Override
	public int getOperandType() {return HAPConstant.CONS_EXPRESSION_OPERAND_NEWOPERATION;}

	@Override
	public HAPData execute(Map<String, HAPData> vars, Map<String, HAPWraper> wraperVars) {
		HAPData[] parms = new HAPData[this.getParameters().length];
		for(int i=0; i<this.getParameters().length; i++){
			parms[i] = this.getParameters()[i].execute(vars, wraperVars);
		}
		HAPServiceData serviceData = null;
		if(m_newOperationInfo==null){
			this.getBaseDataType().newData(parms);
		}
		else{
			this.getBaseDataType().newData(this.m_newOperationInfo.getName(), parms);
		}
		return (HAPData)serviceData.getData();
	}
	
	@Override
	public boolean isScriptRunnable(String script) {
		return false;
	}

}
